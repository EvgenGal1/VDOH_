// подключение -> ===========================================================================================
//  подкл файл ->  сайт https://jquery.com -> конпка download jquery -> ссылка "Загрузите ..... jQuery 3.6.0" -> скачать/сохранить файл -> подкл файл <script src="/js/jQuery.js"></script>
// подкл онлайн -> <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
// в подвал -> просто <script> перед </body>.
// в шапку, пишем так -> $(document).ready(function(){ // код // }) или $(function(){ // код // })

// код для примера -> =========================================================================================
{
  /* 
  <div class="prob">
    <ul class="ul">
      <li>
        <a href="">ссылка 1</a>
        <div><img src="qw1.jpg" alt="" /></div>
        <div><img src="qw2.jpg" alt="" /></div>
        <ul>
          <li>2</li>
        </ul>
      </li>
      <li>
        <a href="">ссылка 2</a>
        <div><img src="qw3.jpg" alt="" /></div>
        <p class="div1">lorem5</p>
        <ul>
          <li>2</li>
        </ul>
      </li>
    </ul>
  <div class="status">0</div>
  <button class="btn">Задать вопрос</button>
  </div>
  */
}

// выбор эл. -> ===========================================================================================
// $('') или jquery('');

// выборка эл. -> ===========================================================================================
// тег - $('а'), класс - $('.menu'), id - $('#ul'),
// вложеность - $('menu li'), дочерний - $('menu > li'), ближ.сосед - $('menu li a + img'),
// атрибут - $('img[src=img/img1.jpg]'), атриб.начало - $('img[src^=img/]'), атриб.конец - $('img[src$=.jpg]'), атриб.везде - $('img[src*=3]'),
// чётные - $('menu li:even'), не чётные - $('menu li:odd'),
// первый - $('li:first'), последний - $('li:last'),
// не выбор - $('img:not([src*=3])'),
// имеет внутри тег - $('li:has(ul)'), имеет внутри текст - $('p:contains(lorem)'),
// скрытые - $('img:hidden'), видимые - $('img:visibility').

// переменные -> ===========================================================================================
// var = $('а')

// МЕТОДЫ -> ===============================================================================================

// цепные функции -> $('p').hide().text('Новые тектс').show(3000);

// взять текст -> .text(); вставить какойто текст -> .text('какойто текст');

// взять высоту/ширину -> .height()/.width(); изменить  высоту/ширину -> .height(300)/.width(150);

// html код -> .html()
// взять -> $('.ul li ul').html(); вывод -> <li>1</li>
// прописать -> $('.ul li ul').html('<p>Новый текст</p>'); вывод -> <p>Новый текст</p>

// основн. аргументы
// не плавно/плавно(duration)(время,умолч.(400),'fast'(200),'slow'(600));  -> .hide()/.hide(1500);
// скорость/кривая Безье(easing)(linear,swing) -> .hide('fast','linear');
// с функцией(complete/callback,this) -> .hide( 500,"linear",function(){alert(эл.)})
// очередь(queue)(true(в очереди),false(сразу)) -> .hide( 500,"linear",function(){alert(эл.)},false)
// альтернатива прописать всё:
// p.hide({ // скрывыаем элементы <p> в документе
//   duration: 800, // продолжительность анимации
//   easing: "linear", // скорость анимации
//   complete: function () { // callback. добавляем текстовую информации в элемент с классом status
//     $(".status").text("Элементы исчезли");
//   },
//   queue: false, // не ставим в очередь
// });

// скрыть/показать элем анимировано. -> .hide()/.show(); !основн. аргум.

// скрыть/показать прозрачность элем -> .fadeOut()/.fadeIn(); .fadeToggle() - для всего; !основн. аргум.

// скрыть, вкл. прозрачность элем -> .fadeTo(); 3 аргум.(время, % прозрачности, функц); .fadeTo(500, 0.5).fadeTo(800, 1)

// свернуть(вниз)/развернуть(вверх) элем анимировано. -> .slideDown()/.slideUp(); .slideToggle() - для всего; !основн. аргум.

// атрибут - взять/добавить(изменить)/удалить -> .attr('src'); / .attr('title', 'Подсказка'); / .removeAttr('src');

// ЦИКЛЫ -> ===============================================================================================

// $(".ul li"); - выбирает весь массив, все дочерние li в .ul

// ФУНКЦИИ -> ===============================================================================================
{
  /*
  в <p> пропис. ширину и высоту переданого класса
  function widthAndHeight(element) { // получаем аргумент в вызове функц(btn)
    var className = "." + element; // в переменную запис. класс с атриб(.btn)
    var w = $("className").width(); // в переменную запис. ширина класса
    var h = $("className").height(); // в переменную запис. высота класса
    $(".ul li p").text("Ширина :" + w + "Высота :" + h); // в <p> пропис. ширину и высоту
  }
  widthAndHeight("btn"); // вызов функц с передачей эл.
  */
}

console.log("Doc.0");

$(function () {
  console.log("Doc.1");
  // скрываем(делает прозрачным) переданый эл. за 1ое переданое время и возвращаем эл. за 2ое переданное время
  function elementOut(element, time1, time2, newClass, time3) {
    // получаем аргументы в вызове функц
    if (time1 > 5000 || time1 < 1000 || isNaN(time1) || isNaN(time2)) {
      // е/и время больше 5с или меньш 1с или там не число
      return false; // возвр ложь - не верно
    } else {
      // иначе
      var className = "." + element; // в переменную запис. класс с аргум
      $(className).fadeOut(time1).fadeIn(time2).addClass(newClass, time3);
      // .removeClass(className)
      // .addClass(className)
      // .fadeOut(time1)
      // .fadeIn(time2); // скрываем эл. за время
    }
  }
  elementOut("DoP-ul", 1000, 1000, "DoP-cl", 5000); // вызов функц с передачей эл. и времени

  // опред. тегу добав. подсказку
  function changeAttr1(element, newAttr, newValue) {
    console.log("Doc.2");
    var tagName = element;
    $(tagName).attr(newAttr, newValue);
  }
  changeAttr1(".DoP-ul li img:not([src*=2])", "title", "Подсказка 1");

  // опред. классу добав. подсказку
  function changeAttr2(element, newAttr, newValue) {
    console.log("Doc.3");
    var className = "." + element;
    $(className).attr(newAttr, newValue);
  }
  changeAttr2("DoP-div1", "title", "Подсказка 2");
});
// ->
// ->
// ->
// ->
// ->
// ->
